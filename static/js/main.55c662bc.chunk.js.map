{"version":3,"sources":["components/Post/Post.jsx","service/index.js","components/Post/index.js","components/Post/Post.container.js","actions/index.js","constants/index.js","components/SideBar/SideBar.jsx","components/SideBar/index.js","components/SideBar/SideBar.container.js","components/DetailPost.jsx","index.js","reducers/index.js"],"names":["Post","onSelectPost","_this$props","_this","props","setSelectedPost","data","this","thumbnail","title","author","react_default","a","createElement","Card_default","className","styles","card","onClick","CardHeader_default","avatar","Avatar_default","aria-label","src","action","IconButton_default","ChevronRight_default","CardContent_default","Typography_default","component","CardActions_default","actions","disableActionSpacing","Close_default","Component","getTopReddits","Promise","resolve","children","PostContainer","connect","selectedPost","type","SideBar","getTopEntries","posts","concat","split","sidebar","map","singlePost","ListItem_default","key","id","button","Link","to","style","textDecoration","width","components_Post","Divider_default","SideBarContainer","state","get","List","toJS","dispatch","redditService","then","entriesData","DetailPost","_ref","match","params","container","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","arguments","length","undefined","Map","setIn","fromJS","applyMiddleware","thunk","render","es","BrowserRouter","basename","process","react","components_SideBar","Route","path","document","getElementById"],"mappings":"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","file":"static/js/main.55c662bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport styles from './styles.scss';\n\nclass Post extends Component {\n  onSelectPost = () => {\n    const { setSelectedPost, data } = this.props;\n    setSelectedPost(data);\n  };\n\n  render() {\n    const { data } = this.props;\n    const { thumbnail, title, author } = data;\n    return (\n      <Card className={styles.card} onClick={this.onSelectPost}>\n        <CardHeader\n          avatar={\n            <Avatar\n              aria-label=\"Recipe\"\n              className={styles.avatar}\n              src={thumbnail}\n            >\n              R\n            </Avatar>\n          }\n          action={\n            <IconButton>\n              <ChevronRight />\n            </IconButton>\n          }\n          title={author}\n        />\n        <CardContent>\n          <Typography component=\"p\">{title}</Typography>\n        </CardContent>\n        <CardActions className={styles.actions} disableActionSpacing>\n          <IconButton aria-label=\"Add to favorites\">\n            <CloseIcon />\n          </IconButton>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nPost.propTypes = {\n  setSelectedPost: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    thumbnail: PropTypes.string,\n    title: PropTypes.string,\n    author: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Post;\n","import data from './mock-data.json';\n\nconst getTopReddits = () => new Promise(resolve => resolve(data.data.children));\n\nexport default getTopReddits;\n","import PostContainer from './Post.container';\n\nexport default PostContainer;\n","import { connect } from 'react-redux';\nimport Post from './Post';\nimport { setSelectedPost } from '../../actions';\n\nexport default connect(\n  null,\n  { setSelectedPost },\n)(Post);\n","import { GET_TOP_ENTRIES, SET_SELECTED_POST } from '../constants';\nimport redditService from '../service';\n\nexport const setTopEntries = entriesData => ({\n  type: GET_TOP_ENTRIES,\n  entriesData,\n});\n\nexport const setSelectedPost = selectedPost => ({\n  type: SET_SELECTED_POST,\n  selectedPost,\n});\n\nexport const getTopEntries = () => dispatch =>\n  redditService().then(data => dispatch(setTopEntries(data)));\n","export const GET_TOP_ENTRIES = 'GET_TOP_ENTRIES';\nexport const SET_SELECTED_POST = 'SET_SELECTED_POST';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport { Link } from 'react-router-dom';\nimport Post from '../Post';\nimport styles from '../../index.scss';\n\nclass SideBar extends Component {\n  componentDidMount() {\n    const { getTopEntries } = this.props;\n    getTopEntries();\n  }\n\n  render() {\n    const { posts } = this.props;\n    return (\n      <div className={`${styles.split} ${styles.sidebar}`}>\n        {posts &&\n          posts.map(singlePost => (\n            <ListItem key={singlePost.data.id} button>\n              <Link\n                to={`/${singlePost.data.id}`}\n                style={{ textDecoration: 'none', width: '100%' }}\n              >\n                <Post data={singlePost.data} />\n              </Link>\n              <Divider />\n            </ListItem>\n          ))}\n      </div>\n    );\n  }\n}\n\nSideBar.propTypes = {\n  getTopEntries: PropTypes.func.isRequired,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      thumbnail: PropTypes.string,\n      title: PropTypes.string,\n      author: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default SideBar;\n","import SideBarContainer from './SideBar.container';\n\nexport default SideBarContainer;\n","import { List } from 'immutable';\nimport { connect } from 'react-redux';\nimport SideBar from './SideBar';\nimport { getTopEntries } from '../../actions';\n\nconst mapStateToProps = state => ({\n  posts: state.get('topEntries', new List()).toJS(),\n});\n\nexport default connect(\n  mapStateToProps,\n  { getTopEntries },\n)(SideBar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../index.scss';\n\nconst DetailPost = ({ match }) => {\n  const { id } = match.params;\n  return (\n    <div className={`${styles.split} ${styles.container}`}>\n      content id: {``}\n      {id}\n    </div>\n  );\n};\n\nDetailPost.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.node,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default DetailPost;\n","import React, { Fragment } from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport SideBar from './components/SideBar';\nimport DetailPost from './components/DetailPost';\nimport rootReducer from './reducers';\n\n/* eslint no-underscore-dangle: 0 */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nconst App = () => (\n  <Fragment>\n    <SideBar />\n    <Route path=\"/:id\" component={DetailPost} />\n  </Fragment>\n);\n\nrender(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n","import { Map, fromJS } from 'immutable';\nimport { GET_TOP_ENTRIES, SET_SELECTED_POST } from '../constants';\n\nexport default (state = new Map(), action) => {\n  switch (action.type) {\n    case GET_TOP_ENTRIES:\n      return state.setIn(['topEntries'], fromJS(action.entriesData));\n    case SET_SELECTED_POST:\n      return state.setIn(['selectedPost'], fromJS(action.selectedPost));\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}